

var gioov = gioov === undefined ? {} : gioov;

/**
 * @desc Array
 * @type {{arrayEqual: Array.arrayEqual}}
 */
gioov.Array = {

    /**
     *
     * @desc 判断两个数组是否相等
     * @param {Array} arr1
     * @param {Array} arr2
     * @return {Boolean}
     */
    arrayEqual : function(arr1, arr2) {
        if (arr1 === arr2) return true;
        if (arr1.length !== arr2.length) return false;
        for (var i = 0; i < arr1.length; ++i) {
            if (arr1[i] !== arr2[i]) return false;
        }
        return true;
    },

    isInArray : function (array,value){
        for (var i = 0; i < array.length; i++){
            if(value === array[i]){
                return true;
            }
        }
        return false;
    }

};

/**
 * @desc Document
 * @type {{offset: Document.offset, setScrollTop: Document.setScrollTop, getKeyName: Document.getKeyName}}
 */
gioov.Document = {
    /**
     *
     * @desc  获取一个元素的距离文档(document)的位置，类似jQ中的offset()
     * @param {HTMLElement} ele
     * @returns { {left: number, top: number} }
     */
    offset : function (ele) {
        var pos = {
            left: 0,
            top: 0
        };
        while (ele) {
            pos.left += ele.offsetLeft;
            pos.top += ele.offsetTop;
            ele = ele.offsetParent;
        }
        return pos;
    },

    /**
     * @desc 设置滚动条距顶部的距离
     * @param value
     * @returns {*}
     */
    setScrollTop : function (value) {
        window.scrollTo(0, value);
        return value;
    },

    /**
     * @desc 根据keycode获得键名
     * @param  {Number} keycode
     * @return {String}
     */
    getKeyName : function (keycode) {
        var keyCodeMap = {
            8: 'Backspace',
            9: 'Tab',
            13: 'Enter',
            16: 'Shift',
            17: 'Ctrl',
            18: 'Alt',
            19: 'Pause',
            20: 'Caps Lock',
            27: 'Escape',
            32: 'Space',
            33: 'Page Up',
            34: 'Page Down',
            35: 'End',
            36: 'Home',
            37: 'Left',
            38: 'Up',
            39: 'Right',
            40: 'Down',
            42: 'Print Screen',
            45: 'Insert',
            46: 'Delete',
            48: '0',
            49: '1',
            50: '2',
            51: '3',
            52: '4',
            53: '5',
            54: '6',
            55: '7',
            56: '8',
            57: '9',
            65: 'A',
            66: 'B',
            67: 'C',
            68: 'D',
            69: 'E',
            70: 'F',
            71: 'G',
            72: 'H',
            73: 'I',
            74: 'J',
            75: 'K',
            76: 'L',
            77: 'M',
            78: 'N',
            79: 'O',
            80: 'P',
            81: 'Q',
            82: 'R',
            83: 'S',
            84: 'T',
            85: 'U',
            86: 'V',
            87: 'W',
            88: 'X',
            89: 'Y',
            90: 'Z',
            91: 'Windows',
            93: 'Right Click',
            96: 'Numpad 0',
            97: 'Numpad 1',
            98: 'Numpad 2',
            99: 'Numpad 3',
            100: 'Numpad 4',
            101: 'Numpad 5',
            102: 'Numpad 6',
            103: 'Numpad 7',
            104: 'Numpad 8',
            105: 'Numpad 9',
            106: 'Numpad *',
            107: 'Numpad +',
            109: 'Numpad -',
            110: 'Numpad .',
            111: 'Numpad /',
            112: 'F1',
            113: 'F2',
            114: 'F3',
            115: 'F4',
            116: 'F5',
            117: 'F6',
            118: 'F7',
            119: 'F8',
            120: 'F9',
            121: 'F10',
            122: 'F11',
            123: 'F12',
            144: 'Num Lock',
            145: 'Scroll Lock',
            182: 'My Computer',
            183: 'My Calculator',
            186: ';',
            187: '=',
            188: ',',
            189: '-',
            190: '.',
            191: '/',
            192: '`',
            219: '[',
            220: '\\',
            221: ']',
            222: '\''
        };

        if (keyCodeMap[keycode]) {
            return keyCodeMap[keycode];
        } else {
            console.log('Unknown Key(Key Code:' + keycode + ')');
            return '';
        }
    }
};

/**
 * @desc Element
 * @type {{hasClass: Element.hasClass}}
 */
gioov.Element = {
    /**
     * @desc 判断元素是否有某个class
     * @param ele
     * @param cls
     * @returns {boolean}
     */
    hasClass : function(ele,cls){
        return (new RegExp('(\\s|^)'+cls+'(\\s|$)')).test(ele.className);
    }
};

/**
 * @desc Cookie
 * @type {{getCookie: Cookie.getCookie, setCookie: Cookie.setCookie, removeCookie: Cookie.removeCookie}}
 */
gioov.Cookie = {
    /**
     * @desc 根据name读取cookie
     * @param name
     * @returns {string}
     */
    getCookie : function (name) {
        var arr = document.cookie.replace(/\s/g,"").split(';');
        for (var i= 0; i < arr.length; i++){
            var tempArr = arr[i].split('=');
            if(tempArr[0] = name){
                return decodeURIComponent(tempArr[1]);
            }
        }
        return '';
    },

    /**
     * @desc 设置cookie
     * @param name
     * @param value
     * @param expires
     */
    setCookie : function (name,value,expires) {
        document.cookie=name+'='+value+';expires='+expires;
    },

    /**
     * @desc 根据name删除cookie
     * @param name
     */
    removeCookie : function (name) {
        setCookie(name,'1',-1);
    }
};

/**
 * @desc Device
 * @type {{getUserAgent: Device.getUserAgent, getBrowser: Device.getBrowser, getOs: Device.getOs}}
 */
gioov.Device = {

    /**
     * @desc 获取UA
     * @returns {string}
     */
    getUserAgent : function () {
        return navigator.userAgent;
    },

    /**
     * @desc 获取浏览器类型及版本
     * @returns {string}
     */
    getBrowser : function () {
        var sys = {},
            ua = Device.getUserAgent().toLowerCase(),
            s;
        (s = ua.match(/rv:([\d.]+)\) like gecko/)) ? sys.ie = s[1]:
            (s = ua.match(/msie ([\d\.]+)/)) ? sys.ie = s[1] :
                (s = ua.match(/edge\/([\d\.]+)/)) ? sys.edge = s[1] :
                    (s = ua.match(/firefox\/([\d\.]+)/)) ? sys.firefox = s[1] :
                        (s = ua.match(/(?:opera|opr).([\d\.]+)/)) ? sys.opera = s[1] :
                            (s = ua.match(/chrome\/([\d\.]+)/)) ? sys.chrome = s[1] :
                                (s = ua.match(/version\/([\d\.]+).*safari/)) ? sys.safari = s[1] :0;

        if (sys.ie) return ('IE:' + sys.ie);
        if (sys.edge) return ('Edge:' + sys.edge);
        if (sys.firefox) return ('Firefox:'+sys.firefox);
        if (sys.chrome) return ('Chrome:'+ sys.chrome);
        if (sys.opera) return ('Opera:' + sys.opera);
        if (sys.safari) return ('Safari:' + sys.safari);
        return 'Unknown';
    },

    /**
     *
     * @desc 获取设备操作系统类型
     * @return {String}
     */
    getOs : function () {
        var userAgent = 'navigator' in window && 'userAgent' in navigator && Device.getUserAgent().toLowerCase() || '';
        var vendor = 'navigator' in window && 'vendor' in navigator && navigator.vendor.toLowerCase() || '';
        var appVersion = 'navigator' in window && 'appVersion' in navigator && navigator.appVersion.toLowerCase() || '';
        if (/mac/i.test(appVersion)) return 'MacOSX';
        if (/win/i.test(appVersion)) return 'Windows';
        if (/linux/i.test(appVersion)) return 'Linux';
        if (/iphone/i.test(userAgent)) return 'iPhone';
        if (/ipad/i.test(userAgent)) return 'iPad';
        if (/ipod/i.test(userAgent)) return 'iPod';
        if (/android/i.test(userAgent)) return 'Android';
        if (/win/i.test(appVersion) && /phone/i.test(userAgent)) return 'Windows Phone'
    }
};

/**
 * @desc Window
 * @type {{getScrollTop: Window.getScrollTop, scrollTo: Window.scrollTo, keyDown: Window.keyDown}}
 */
gioov.Window = {
    /**
     * @desc 获取滚动条距顶部的距离
     */
    getScrollTop : function () {
        return (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop;
    },

    /**
     * @desc  在${duration}时间内，滚动条平滑滚动到${to}指定位置
     * @param {Number} to
     * @param {Number} duration
     */
    scrollTo : function (to, duration) {

        var requestAnimFrame = (function () {
            return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame ||
                function (callback) {
                    window.setTimeout(callback, 1000 / 60);
                };
        })();

        if (duration < 0) {
            setScrollTop(to);
            return;
        }
        var diff = to - getScrollTop();
        if (diff === 0)
            return;

        var step = diff / duration * 10;
        requestAnimationFrame(
            function () {
                if (Math.abs(step) > Math.abs(diff)) {
                    setScrollTop(getScrollTop() + diff);
                    return;
                }
                setScrollTop(getScrollTop() + step);
                if (diff > 0 && getScrollTop() >= to || diff < 0 && getScrollTop() <= to) {
                    return;
                }
                scrollTo(to, duration - 16);
            });
    },

    /**
     * @desc 某个按键按下操作
     * 回车键（enter） = 13
     * @param keyCode
     * @param callback
     */
    keyDown : function(keyCode,callback){
        window.onkeydown=function () {
            if (event.keyCode === keyCode) {
                if (callback !== undefined) {
                    callback();
                }
            }
        }
    }
};

/**
 * @desc Object
 * @type {{undefinedAndNull: Object.undefinedAndNull, count: Object.count, isEmptyObject: Object.isEmptyObject}}
 */
gioov.Object = {

    /**
     * @desc 判断对象是否定义和是否为NULL
     * @param o
     * @returns {boolean}
     */
    undefinedAndNull : function(o) {
        if(o === undefined){
            return true;
        }

        if(o === null){
            return true;
        }
    },

    /**
     *
     * @param o
     * @returns {*}
     */
    count : function (o) {
        // 计算对象的子元素长度
        var t = typeof o;
        if(t === 'string'){
            return o.length;
        }else if(t === 'object'){
            for (var i=0; i<o.length; i++){
                i++;
            }
            return n;
        }
        return false;
    },

    /**
     *
     * @desc   判断`obj`是否为空
     * @param  {Object} obj
     * @return {Boolean}
     */
    isEmptyObject : function (obj) {

        if (!obj || typeof obj !== 'object' || Array.isArray(obj))
            return false;
        return !Object.keys(obj).length
    }
};

/**
 * @desc Random
 * @type {{randomColor: Random.randomColor, randomNum: Random.randomNum}}
 */
gioov.Random = {
    /**
     * @desc 随机生成颜色
     * @return {String}
     */
    randomColor : function () {
        return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).slice(-6);
    },

    /**
     * @desc 生成指定范围随机数
     * @param  {Number} min
     * @param  {Number} max
     * @return {Number}
     */

    randomNum : function (min, max) {
        return Math.floor(min + Math.random() * (max - min));
    }
};

/**
 * @desc String
 * @type {{digitUppercase: String.digitUppercase}}
 */
gioov.String = {
    /**
     *
     * @desc   现金额转大写
     * @param  {Number} n
     * @return {String}
     */
    digitUppercase : function (n) {
        var fraction = ['角', '分'];
        var digit = ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'];
        var unit = [['元', '万', '亿'], ['', '拾', '佰', '仟']];
        var head = n < 0 ? '欠' : '';
        n = Math.abs(n);
        var s = '';
        for (var i = 0; i < fraction.length; i++) {
            s += (digit[ Math.floor(n * 10 * Math.pow(10, i)) % 10] + fraction[i]).replace(/零./, '');
        }
        s = s || '整';
        n = Math.floor(n);
        for (var i = 0; i < unit[0].length && n > 0; i++) {
            var p = '';
            for (var j = 0; j < unit[1].length && n > 0; j++) {
                p = digit[n % 10] + unit[1][j] + p;
                n = Math.floor(n / 10);
            }
            s = p.replace(/(零.)*零$/, '').replace(/^$/, '零') + unit[0][i] + s;
        }
        return head + s.replace(/(零.)*零元/, '元').replace(/(零.)+/g, '零').replace(/^整$/, '零元整');
    }
};

/**
 * @desc Date
 * @type {{formatPassTime: Date.formatPassTime, formatRemainTime: Date.formatRemainTime, getDaysInMonth: Date.getDaysInMonth, getEndOfMonth: Date.getEndOfMonth, format: Date.format}}
 */
gioov.Date = {
    /**
     * @desc   格式化${startTime}距现在的已过时间
     * @param  {Date} startTime
     * @return {String}
     */
    formatPassTime : function (startTime) {
        var currentTime = Date.parse(new Date()),
            time = currentTime - startTime,
            day = parseInt(time / (1000 * 60 * 60 * 24)),
            hour = parseInt(time / (1000 * 60 * 60)),
            min = parseInt(time / (1000 * 60)),
            month = parseInt(day / 30),
            year = parseInt(month / 12);
        if (year) return year + "年前";
        if (month) return month + "个月前";
        if (day) return day + "天前";
        if (hour) return hour + "小时前";
        if (min) return min + "分钟前";
        else return'刚刚'
    },

    /**
     *
     * @desc   格式化现在距${endTime}的剩余时间
     * @param  {Date} endTime
     * @return {String}
     */
    formatRemainTime : function (endTime) {

        var startDate = new Date();
        //开始时间
        var endDate = new Date(endTime);
        //结束时间

        var t = endDate.getTime() - startDate.getTime();
        //时间差
        var d = 0, h = 0, m = 0, s = 0;
        if (t >= 0) {
            d = Math.floor(t / 1000 / 3600 / 24);
            h = Math.floor(t / 1000 / 60 / 60 % 24);
            m = Math.floor(t / 1000 / 60 % 60);
            s = Math.floor(t / 1000 % 60);
        }
        return d + "天 " + h + "小时 " + m + "分钟 " + s + "秒";
    },

    /**
     * @desc 获取某年某月一共有多少天
     * @param year
     * @param month
     * @returns {number}
     */
    getDaysInMonth : function (year,month){
        var date = new Date(year, month, 1);
        return new Date(date.getTime() - 864e5).getDate();
    },

    /**
     * @desc 获取指定年下的月一共有多少天
     * @param year
     * @param month
     */
    getEndOfMonth : function(year,month){
        return new Date(year+'-'+month+'-'+Date.getDaysInMonth(year,month));
    },

    /**
     * @desc 格式化日期，yyyy-MM-dd hh:mm:ss.S
     * @param fmt
     * @param date
     * @returns {*}
     */
    format : function (fmt,date) {
        var o = {
            "M+": date.getMonth() + 1, //月份
            "d+": date.getDate(), //日
            "h+": date.getHours(), //小时
            "m+": date.getMinutes(), //分
            "s+": date.getSeconds(), //秒
            "q+": Math.floor((date.getMonth() + 3) / 3), //季度
            "S": date.getMilliseconds() //毫秒
        };
        if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
        for (var i=0; i<o.length; i++)
            if (new RegExp("(" + i + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[i]) : (("00" + o[i]).substr(("" + o[i]).length)));
        return fmt;
    }
};

/**
 * @desc Url
 * @type {{getQueryString: Url.getQueryString, parseQueryString: Url.parseQueryString, stringifyQueryString: Url.stringifyQueryString}}
 */
gioov.Url = {
    /**
     * @desc 获取GET请求URL指定参数值
     * @param name
     * @returns {*}
     */
    getQueryString : function(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var r = window.location.search.substr(1).match(reg);
        if (r !== null) return decodeURI(r[2]);
        return null;
    },

    /**
     *
     * @desc   url参数转对象
     * @param  {String} url  default: window.location.href
     * @return {Object}
     */
    parseQueryString : function (url) {
        url = url == null ? window.location.href : url;
        var search = url.substring(url.lastIndexOf('?') + 1);
        if (!search) {
            return {};
        }
        return JSON.parse('{"' + decodeURIComponent(search).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g, '":"') + '"}');
    },

    /**
     *
     * @desc   对象序列化
     * @param  {Object} obj
     * @return {String}
     */
    stringifyQueryString : function (obj) {
        if (!obj) return '';
        var pairs = [];
        for (var key = 0; key<obj.length; key++) {
            var value = obj[key];
            if (value instanceof Array) {
                for (var i = 0; i < value.length; ++i) {
                    pairs.push(encodeURIComponent(key + '[' + i + ']') + '=' + encodeURIComponent(value[i]));
                }
                continue;
            }
            pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));
        }
        return pairs.join('&');
    }
};

/**
 * @desc Request
 * @type {{ajax: Request.ajax}}
 */
gioov.Request = {
    /**
     * @desc 重新封装jQuery AJAX 函数
     * @param options
     * @param successCallback
     * @param errorCallback
     */
    ajax : function(options) {

        var defaults = {
            async:true,
            type:'GET',
            dataType:'json',
            processData:true,
            error:function (XMLHttpRequest, textStatus, errorThrown) {
                console.log(XMLHttpRequest);
            }
        };

        options = $.extend(true,defaults,options);
        return $.ajax(options);
    },

};